install.packages("palmerpenguins")
library("palmerpenguins")
summary(penguins)
View(penguins)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse) #helps wrangle data
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
df <- read.csv("12_months_city_bike.csv")
getwd()
setwd("D:/DATA_ANALYSIS/Case_1")
df <- read.csv("12_months_city_bike.csv")
colnames(df) #List of column names
nrow(df) #How many rows are in data frame?
dim(df) #Dimensions of the data frame?
str(df) #See list of columns and data types (numeric, character, etc)
summary(df) #Statistical summary of data. Mainly for numerics
summary(df) #Statistical summary of data. Mainly for numeric
install.packages("lubridate")
library(lubridate)
# Assuming 'started_at' is in character format
df$started_at <- ymd_hms(df$started_at)
# Separate year, month, day, and time and add them to df
df$year <- year(df$started_at)
df$month <- month(df$started_at)
df$day <- day(df$started_at)
df$time <- format(df$started_at, "%H:%M:%S")
# View the updated dataframe
head(df)
df <- df %>%
mutate(day_of_week = recode(day_of_week,
`1` = "Sunday",
`2` = "Monday",
`3` = "Tuesday",
`4` = "Wednesday",
`5` = "Thursday",
`6` = "Friday",
`7` = "Saturday"))
df <- df %>%
mutate(day_of_week = recode(day_of_week,
1 = "Sunday",
df <- df %>%
mutate(week_day = recode(day_of_week,
`1` = "Sunday",
`2` = "Monday",
`3` = "Tuesday",
`4` = "Wednesday",
`5` = "Thursday",
`6` = "Friday",
`7` = "Saturday")) %>%
select(-day_of_week)  # Drop 'day_of_week' column
df <- df %>%
mutate(week_day = recode(day_of_week,
1 = "Sunday",
library(dplyr)
df <- df %>%
mutate(week_day = recode(day_of_week,
`1` = "Sunday",
`2` = "Monday",
`3` = "Tuesday",
`4` = "Wednesday",
`5` = "Thursday",
`6` = "Friday",
`7` = "Saturday")) %>%
select(-day_of_week)  # Drop 'day_of_week' column
head(df)
table(df$member_casual)
df$ride_length <- difftime(df$ended_at,df$started_at)
str(df)
df$ride_length <- as.numeric(as.character(df$ride_length))
is.numeric(df$ride_length)
df_v2 <- df[!(df$start_station_name == "HQ QR" | df$ride_length<0),]
df$started_at <- ymd_hms(df$started_at)
df$ended_at <- ymd_hms(df$ended_at)
str(df)
df$ride_length <- difftime(df$ended_at,df$started_at)
head(df)
columns(df)
colnames(df)
str(df)
df_v2 <- df[!(df$start_station_name == "HQ QR" | df$ride_length<0),]
str(df_v2)
mean(df_v2$ride_length) #straight average (total ride length / rides)
median(df_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(df_v2$ride_length) #longest ride
min(df_v2$ride_length)
# Calculate the mean of 'ride_length' ignoring NA values
mean(df_v2$ride_length, na.rm = TRUE)
median(df_v2$ride_length,na.rm=TRUE) #midpoint number in the ascending array of ride lengths
max(df_v2$ride_length,na.rm=TRUE) #longest ride
min(df_v2$ride_length,na.rm=TRUE)
summary(df_v2$ride_length)
aggregate(df_v2$ride_length ~ df_v2$member_casual, FUN = mean)
aggregate(df_v2$ride_length ~ df_v2$member_casual, FUN = median)
aggregate(df_v2$ride_length ~ df_v2$member_casual, FUN = max)
aggregate(df_v2$ride_length ~ df_v2$member_casual, FUN = min)
aggregate(df_v2$ride_length ~ df_v2$member_casual + df_v2$day_of_week,
FUN = mean)
aggregate(df_v2$ride_length ~ df_v2$member_casual + df_v2$week_day,
FUN = mean)
